scalar Date

enum LinkStatus {
    NOT_LINKED
    LINKED
}

enum CalculationStatus {
    CALCULATION_NEEDED
    CALCULATION_OK
    CALCULATION_IN_PROGRESS
    CALCULATION_NOT_POSSIBLE
    CALCULATION_ERROR
}

enum ValidationStatus {
    VALIDATION_NOT_SET
    VALIDATION_NOT_NEEDED
    VALIDATED
    INVALIDATED
}

enum ApprovalStatus {
    APPROVAL_NOT_SET
    APPROVAL_NOT_NEEDED
    APPROVED
    DISAPPROVED
}

enum UploadStatus {
    UPLOAD_NOT_SET
    UPLOAD_NOT_NEEDED
    UPLOADED
}

enum WellStatus {
    ACCEPTED_DEFAULT
    ACCEPTED
    REJECTED_PLATEPREP
    REJECTED_DATACAPTURE
    REJECTED_PHAEDRA
    REJECTED_OUTLIER_PHAEDRA_MANUAL
    REJECTED_OUTLIER_PHAEDRA_AUTO
}

enum ProjectAccessLevel {
    Read
    Write
    Admin
}

type ProjectDTO {
    id: ID
    name: String
    description: String
    createdOn: Date
    createdBy: String
    updatedOn: Date
    updatedBy: String

    tags: [String]
}

type ProjectAccessDTO {
    id: ID
    projectId: ID
    teamName: String
    accessLevel: ProjectAccessLevel
}

type ExperimentDTO {
    id: ID
    name: String
    description: String
    status: String
    projectId: Int
    multiploMethod: String
    multiploParameter: String
    createdOn: Date
    createdBy: String
    updatedOn: Date
    updatedBy: String

    tags: [String]
}

type ExperimentSummaryDTO {
    experimentId: ID
    nrPlates: Int
    nrPlatesCalculated: Int
    nrPlatesValidated: Int
    nrPlatesApproved: Int
}

type PlateDTO {
    id: ID
    barcode: String
    description: String
    experimentId: Int

    rows: Int
    columns: Int
    sequence: Int

    linkStatus: LinkStatus
    linkSource: String
    linkTemplateId: String
    linkedOn: Date

    calculationStatus: CalculationStatus
    calculationError: String
    calculatedBy: String
    calculatedOn: Date

    validationStatus: ValidationStatus
    validatedBy: String
    validatedOn: Date
    invalidatedReason: String

    approvalStatus: ApprovalStatus
    approvedBy: String
    approvedOn: Date
    disapprovedReason: String

    uploadStatus: UploadStatus
    uploadedBy: String
    uploadedOn: Date

    createdOn: Date
    createdBy: String
    updatedOn: Date
    updatedBy: String

    tags: [String]
}

type WellDTO {
    id: ID
    plateId: ID
    row: Int
    column: Int
    wellType: String
    status: WellStatus
    description: String
    wellSubstance: WellSubstanceDTO

    tags: [String]
}

type WellSubstanceDTO {
    id: ID
    wellId: ID
    type: String
    name: String
    concentration: Float
}

type PlateMeasurementDTO {
    """Plate information"""
    plateId: Int
    barcode: String
    rows: Int
    columns: Int

    """Linked Measurement information"""
    measurementId: Int
    source: String
    active: Boolean
    wellColumns: [String]
    subWellColumns: [String]
    imageChannels: [String]
}

type WellTemplateDTO {
     id: ID
     description: String
     row: Int
     column: Int
     plateTemplateId: ID
     wellType: String
     skipped: Boolean
     substanceName: String
     substanceType: String
     concentration: Float
}

type PlateTemplateDTO {
    id: ID
    name: String
    description: String
    rows: Int
    columns: Int
    createdOn: Date
    createdBy: String
    updatedOn: Date
    updatedBy: String

    wells: [WellTemplateDTO]
    tags: [String]
}

type Query {
    getProjects: [ProjectDTO]
    getProjectById(projectId: ID): ProjectDTO
    getProjectAccess(projectId: ID): [ProjectAccessDTO]
    getExperiments: [ExperimentDTO]
    getExperimentsByProjectId(projectId: ID): [ExperimentDTO]
    getExperimentById(experimentId: ID): ExperimentDTO
    getExperimentSummaries: [ExperimentSummaryDTO]
    getExperimentSummariesByProjectId: [ExperimentSummaryDTO]
    getExperimentSummaryByExperimentId: ExperimentSummaryDTO
    getPlatesByExperimentId(experimentId: ID): [PlateDTO]
    getPlatesByBarcode(barcode: String): [PlateDTO]
    getPlateById(plateId: ID): PlateDTO
    getPlateWells(plateId: ID): [WellDTO]
    getPlateMeasurements(plateId: ID, active: Boolean): [PlateMeasurementDTO]
    getPlateTemplates: [PlateTemplateDTO]
    getPlateTemplateById(plateTemplateId: ID): PlateTemplateDTO
    getWellTemplatesByPlateTemplateId(plateTemplateId: ID): [WellTemplateDTO]
}

input PlateTemplateInput {
    name: String
    description: String
}

input WellTemplateInput {
    description: String
    wellType: String
    skipped: Boolean
    substanceName: String
    substanceType: String
    concentration: Float
}

type Mutation {
    updatePlateTemplate(plateTemplateId: ID!, plateTemplate: PlateTemplateInput): PlateTemplateDTO
    updateWellTemplates(plateTemplateId: ID!, wellTemplates: [WellTemplateInput]): [WellTemplateDTO]
}
